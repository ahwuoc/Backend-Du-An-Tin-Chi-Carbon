import type { Request, Response, NextFunction } from "express";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import validator from "validator";
import { sendEmail } from "../utils/sendEmail";
import { resetPasswordContent } from "../utils/emailTemplates";
import { UserModel } from "../models/users.model";
import axios from "axios";

const JWT_SECRET = process.env.JWT_SECRET as string;
const JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || "7d";

if (!JWT_SECRET) {
  console.error("FATAL ERROR: JWT_SECRET environment variable is missing.");
  process.exit(1);
}

interface RequestAuthentication extends Request {
  user?: { id: string; email: string; role: string };
}

type ExpressHandler = (
  req: RequestAuthentication,
  res: Response,
  next: NextFunction
) => Promise<void> | void;

class AuthController {
  private userModel = UserModel;

  private createToken(
    payload: object,
    expiresIn: string = JWT_EXPIRES_IN
  ): string {
    return jwt.sign(payload, JWT_SECRET, { expiresIn } as jwt.SignOptions);
  }

  private async handleUserExistenceAndPasswordHashing(
    email: string,
    password: string
  ): Promise<string> {
    const existingUser = await this.userModel.findOne({ email });
    if (existingUser) {
      throw new Error("Ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i v·ªõi email n√†y.");
    }
    const hashedPassword = await bcrypt.hash(password, 10);
    return hashedPassword;
  }

  public async getAllUser(
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<void> {
    try {
      const users = await this.userModel.find().select("-password").lean();
      console.log("L·ªói khi l·∫•y danh s√°ch user:");
      res.status(200).json({ success: true, data: users });
    } catch (error) {
      console.error("L·ªói khi l·∫•y danh s√°ch user:", error);
      res
        .status(500)
        .json({ success: false, message: "Internal Server Error" });
    }
  }

  public async changeUser(
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<void> {
    try {
      const { _id, name, email, avatar, phone, address, role } = req.body;
      if (!_id || !email) {
        res
          .status(400)
          .json({ success: false, message: "Thi·∫øu ID ng∆∞·ªùi d√πng ho·∫∑c email." });
        return;
      }
      const updatedUser = await this.userModel
        .findByIdAndUpdate(
          _id,
          { name, email, avatar, phone, address, role },
          { new: true, runValidators: true }
        )
        .select("-password");

      if (!updatedUser) {
        res
          .status(404)
          .json({ success: false, message: "Ng∆∞·ªùi d√πng kh√¥ng t√¨m th·∫•y." });
        return;
      }
      res.status(200).json({
        success: true,
        message: "Th√¥ng tin ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.",
        user: updatedUser,
      });
    } catch (err: any) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng:", err);
      if (err.name === "ValidationError") {
        res.status(400).json({
          success: false,
          message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.",
          errors: err.errors,
        });
        return;
      }
      res.status(500).json({ success: false, message: "L·ªói m√°y ch·ªß n·ªôi b·ªô." });
    }
  }

  public authenticate: ExpressHandler = async (req, res, next) => {
    let token = req.cookies?.token;

    if (!token && req.headers.authorization?.startsWith("Bearer ")) {
      token = req.headers.authorization.split(" ")[1];
    }

    if (!token) {
      res.status(401).json({
        success: false,
        error: "Kh√¥ng c√≥ token x√°c th·ª±c. Vui l√≤ng ƒëƒÉng nh·∫≠p.",
      });
      return;
    }

    try {
      const decoded = jwt.verify(token, JWT_SECRET) as {
        id: string;
        email: string;
        role: string;
      };
      req.user = { id: decoded.id, email: decoded.email, role: decoded.role };
      next();
    } catch (error) {
      console.error("L·ªói x√°c th·ª±c token:", error);
      res
        .status(401)
        .json({ success: false, error: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n." });
    }
  };

  public register: ExpressHandler = async (req, res, next) => {
    const { email, password, name, role = "user" } = req.body;
    if (!email || !password || !name) {
      res.status(400).json({
        success: false,
        error: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc (email, password, name).",
      });
      return;
    }
    if (!validator.isEmail(email)) {
      res.status(400).json({ success: false, error: "Email kh√¥ng h·ª£p l·ªá." });
      return;
    }
    if (password.length < 6) {
      res
        .status(400)
        .json({ success: false, error: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±." });
      return;
    }

    try {
      const existingUser = await this.userModel.findOne({ email });
      if (existingUser) {
        res.status(409).json({
          success: false,
          error: "Ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i v·ªõi email n√†y.",
        });
        return;
      }
      const hashedPassword = await bcrypt.hash(password, 10);
      const newUser = await this.userModel.create({
        email,
        password: hashedPassword,
        name,
        role,
        createdAt: new Date(),
      });
      if (!newUser) {
        res.status(409).json({
          success: false,
          error: "ƒêƒÉng k√Ω th·∫•t b·∫°i vui l√≤ng th·ª≠ l·∫°i",
        });
        return;
      }
      res.status(201).json({
        success: true,
        message: "ƒêƒÉng k√Ω th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p ngay.",
        user: {
          id: newUser._id,
          name: newUser.name,
          email: newUser.email,
        },
      });
      return;
    } catch (error: any) {
      console.error("L·ªói ƒëƒÉng k√Ω:", error);
      res.status(500).json({
        success: false,
        error: error.message || "L·ªói h·ªá th·ªëng khi ƒëƒÉng k√Ω.",
      });
    }
  };

  public async LoginEmailAuth(
    req: RequestAuthentication,
    res: Response,
    next: NextFunction
  ): Promise<void> {
    const googleAccessToken = req.params.access_token;
    if (!googleAccessToken) {
      res.status(400).json({
        success: false,
        error: "Google access token kh√¥ng ƒë∆∞·ª£c cung c·∫•p.",
      });
      return;
    }

    try {
      console.log("üì° ƒêang g·ªçi Google API ƒë·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng...");
      const userInfoResponse = await axios.get(
        "https://www.googleapis.com/oauth2/v3/userinfo",
        {
          headers: {
            Authorization: `Bearer ${googleAccessToken}`,
          },
        }
      );

      const googleUserData = userInfoResponse.data;
      if (!googleUserData || !googleUserData.email) {
        res.status(400).json({
          success: false,
          error:
            "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ Google ho·∫∑c email b·ªã thi·∫øu.",
        });
        return;
      }
      let user = await this.userModel.findOne({
        email: googleUserData.email,
      });
      let isNewUser = false;
      if (!user) {
        const randomPassword = Math.random().toString(36).slice(-8) + "G!";
        const hashedPassword = await bcrypt.hash(randomPassword, 10);
        user = await this.userModel.create({
          email: googleUserData.email,
          name: googleUserData.name || googleUserData.given_name,
          avatar: googleUserData.picture,
          password: hashedPassword,
          role: "user",
          isVerified: googleUserData.email_verified,
          provider: "google",
        });
        isNewUser = true;
      } else {
        let changed = false;
        if (user.avatar && googleUserData.picture) {
          user.avatar = googleUserData.picture;
          changed = true;
        }
        if (changed) {
          await user.save();
        }
      }
      const userPayloadForToken = {
        userId: user!._id.toString(),
        email: user!.email,
        role: user!.role,
        name: user!.name,
      };
      const token = this.createToken(userPayloadForToken, JWT_EXPIRES_IN);
      res.cookie("token", token, {
        httpOnly: false,
        secure: process.env.NODE_ENV === "production",
        sameSite: "lax",
        maxAge: 7 * 24 * 60 * 60 * 1000,
      });
      res.status(isNewUser ? 201 : 200).json({
        success: true,
        token,
      });
    } catch (error: any) {
      res.status(500).json({
        success: false,
        error: "L·ªói h·ªá th·ªëng khi x·ª≠ l√Ω ƒëƒÉng nh·∫≠p Google.",
      });
    }
  }

  public login: ExpressHandler = async (req, res, next) => {
    const { email, password } = req.body;
    if (!email || !password) {
      res
        .status(400)
        .json({ success: false, error: "Thi·∫øu email ho·∫∑c m·∫≠t kh·∫©u." });
      return;
    }
    try {
      const user = await this.userModel.findOne({ email }).select("+password");
      if (!user) {
        res
          .status(401)
          .json({ success: false, error: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng." });
        return;
      }

      const isPasswordCorrect = await bcrypt.compare(password, user.password);
      if (!isPasswordCorrect) {
        res
          .status(401)
          .json({ success: false, error: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng." });
        return;
      }
      const userPayloadForToken = {
        userId: user._id.toString(),
        email: user.email,
        role: user.role,
        name: user.name,
      };
      const token = this.createToken(userPayloadForToken, JWT_EXPIRES_IN);

      res.cookie("token", token, {
        httpOnly: false,
        secure: process.env.NODE_ENV === "production",
        sameSite: "lax",
        maxAge: 7 * 24 * 60 * 60 * 1000,
        path: "/",
      });
      res.status(200).json({
        success: true,
        message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
        token,
      });
    } catch (error: any) {
      console.error("L·ªói ƒëƒÉng nh·∫≠p:", error);
      res
        .status(500)
        .json({ success: false, error: "L·ªói m√°y ch·ªß n·ªôi b·ªô khi ƒëƒÉng nh·∫≠p." });
    }
  };

  public forgotPassword: ExpressHandler = async (req, res, next) => {
    const { email } = req.body;
    if (!email) {
      res.status(400).json({
        success: false,
        error: "Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ email c·ªßa b·∫°n.",
      });
      return;
    }
    if (!validator.isEmail(email)) {
      res
        .status(400)
        .json({ success: false, error: "ƒê·ªãa ch·ªâ email kh√¥ng h·ª£p l·ªá." });
      return;
    }

    try {
      const user = await this.userModel.findOne({ email });
      if (!user) {
        res.status(200).json({
          success: true,
          message:
            "N·∫øu email c·ªßa b·∫°n t·ªìn t·∫°i trong h·ªá th·ªëng, m·ªôt li√™n k·∫øt ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i.",
        });
        return;
      }

      const resetTokenPayload = {
        userId: user._id.toString(),
        email: user.email,
        type: "PASSWORD_RESET",
      };
      const resetToken = this.createToken(resetTokenPayload, "15m");

      const resetLink = `${
        process.env.FRONT_END_URL || "http://localhost:3000"
      }/reset-password?token=${resetToken}`;

      const emailHtmlContent = resetPasswordContent(resetLink);

      await sendEmail(email, "Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u", emailHtmlContent);

      res.status(200).json({
        success: true,
        message:
          "N·∫øu email c·ªßa b·∫°n t·ªìn t·∫°i trong h·ªá th·ªëng, m·ªôt li√™n k·∫øt ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i.",
      });
    } catch (error: any) {
      console.error("L·ªói qu√™n m·∫≠t kh·∫©u:", error);
      res.status(500).json({
        success: false,
        error: "L·ªói m√°y ch·ªß n·ªôi b·ªô khi x·ª≠ l√Ω y√™u c·∫ßu qu√™n m·∫≠t kh·∫©u.",
      });
    }
  };

  public resetPassword: ExpressHandler = async (req, res, next) => {
    const { token } = req.query;
    const { newPassword } = req.body;

    if (!token || typeof token !== "string") {
      res
        .status(400)
        .json({ success: false, error: "Thi·∫øu token ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u." });
      return;
    }
    if (!newPassword || newPassword.length < 6) {
      res.status(400).json({
        success: false,
        error: "M·∫≠t kh·∫©u m·ªõi kh√¥ng h·ª£p l·ªá (ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±).",
      });
      return;
    }

    try {
      const decoded = jwt.verify(token, JWT_SECRET) as {
        userId: string;
        email: string;
        type?: string;
      };

      if (decoded.type !== "PASSWORD_RESET") {
        res.status(400).json({
          success: false,
          error: "Token kh√¥ng h·ª£p l·ªá cho vi·ªác ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.",
        });
        return;
      }

      const hashedPassword = await bcrypt.hash(newPassword, 10);

      const updatedUser = await this.userModel.findByIdAndUpdate(
        decoded.userId,
        { password: hashedPassword },
        { new: true }
      );

      if (!updatedUser) {
        res.status(404).json({
          success: false,
          error:
            "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ho·∫∑c token kh√¥ng h·ª£p l·ªá.",
        });
        return;
      }

      res.status(200).json({
        success: true,
        message:
          "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p b·∫±ng m·∫≠t kh·∫©u m·ªõi.",
      });
    } catch (err: any) {
      console.error("L·ªói ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:", err);
      if (err.name === "TokenExpiredError") {
        res.status(400).json({
          success: false,
          error: "Token ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu l·∫°i.",
        });
        return;
      }
      if (err.name === "JsonWebTokenError") {
        res.status(400).json({
          success: false,
          error: "Token ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá.",
        });
        return;
      }
      res.status(500).json({
        success: false,
        error: "L·ªói m√°y ch·ªß n·ªôi b·ªô khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.",
      });
    }
  };

  public changePassword: ExpressHandler = async (req, res, next) => {
    const { oldPassword, newPassword } = req.body;
    const userId = req.user?.id;

    if (!oldPassword || !newPassword) {
      res.status(400).json({
        success: false,
        error: "C·∫£ m·∫≠t kh·∫©u c≈© v√† m·∫≠t kh·∫©u m·ªõi ƒë·ªÅu l√† b·∫Øt bu·ªôc.",
      });
      return;
    }
    if (newPassword.length < 6) {
      res.status(400).json({
        success: false,
        error: "M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.",
      });
      return;
    }
    if (oldPassword === newPassword) {
      res
        .status(400)
        .json({ success: false, error: "M·∫≠t kh·∫©u m·ªõi ph·∫£i kh√°c m·∫≠t kh·∫©u c≈©." });
      return;
    }

    if (!userId) {
      res.status(401).json({
        success: false,
        error: "Ng∆∞·ªùi d√πng ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c.",
      });
      return;
    }

    try {
      const user = await this.userModel.findById(userId).select("+password");

      if (!user) {
        res
          .status(404)
          .json({ success: false, error: "Ng∆∞·ªùi d√πng kh√¥ng t√¨m th·∫•y." });
        return;
      }

      const isOldPasswordValid = await bcrypt.compare(
        oldPassword,
        user.password
      );
      if (!isOldPasswordValid) {
        res
          .status(400)
          .json({ success: false, error: "M·∫≠t kh·∫©u c≈© kh√¥ng ch√≠nh x√°c." });
        return;
      }

      const hashedNewPassword = await bcrypt.hash(newPassword, 10);
      user.password = hashedNewPassword;
      await user.save();

      res.status(200).json({
        success: true,
        message: "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng.",
      });
    } catch (error: any) {
      console.error("L·ªói ƒë·ªïi m·∫≠t kh·∫©u:", error);
      res.status(500).json({
        success: false,
        error: "L·ªói m√°y ch·ªß n·ªôi b·ªô khi ƒë·ªïi m·∫≠t kh·∫©u.",
      });
    }
  };

  public logout: ExpressHandler = async (req, res, next) => {
    res.cookie("token", "", {
      httpOnly: false,
      secure: process.env.NODE_ENV === "production",
      sameSite: "lax",
      expires: new Date(0),
      path: "/",
    });
    res.status(200).json({ success: true, message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng." });
  };
}

export default AuthController;
