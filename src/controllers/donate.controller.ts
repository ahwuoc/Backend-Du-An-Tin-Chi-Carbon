import type { Request, Response } from "express";
import Donation from "../models/donate.model";

class DonationController {
  public async createDonation(req: Request, res: Response) {
    console.log("Ch·∫°y v√†o createDonation");

    try {
      const { name, email, phone, quantity, note, totalAmount, bankInfo } =
        req.body;
      if (
        !name ||
        !email ||
        !phone ||
        !quantity ||
        !totalAmount ||
        !bankInfo?.accountName ||
        !bankInfo?.accountNumber ||
        !bankInfo?.bank ||
        !bankInfo?.branch ||
        !bankInfo?.content
      ) {
        res
          .status(400)
          .json({ error: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc, ki·ªÉm tra l·∫°i n√†o!" });
      }
      const donation = new Donation({
        name,
        email,
        phone,
        quantity,
        note,
        totalAmount,
        bankInfo,
        treeCount: req.body.treeCount || 0,
        amount: req.body.amount || 0,
        user: req.body.user || null,
      });

      await donation.save();
      res.status(201).json({
        message: "ƒê√≥ng g√≥p th√†nh c√¥ng, c·∫£m ∆°n b·∫°n ƒë√£ g√≥p xanh! üå≥",
        donation,
      });
    } catch (error) {
      console.error("L·ªói khi l∆∞u ƒë√≥ng g√≥p:", error);
      res
        .status(500)
        .json({ error: "Oops! Server h·ªèng m·∫•t, th·ª≠ l·∫°i sau nh√©!" });
    }
  }
  public async getInfoDonations(req: Request, res: Response) {
    try {
      const donations = await Donation.find().sort({ createdAt: -1 }).limit(50);

      const totalQuantity = donations.reduce(
        (acc, donation) => acc + donation.quantity,
        0,
      );

      const totalTreeCount = donations.reduce(
        (acc, donation) => acc + (donation.treeCount || 0),
        0,
      );

      const contributorMap: Record<string, number> = {};

      donations.forEach((d) => {
        const key = d.email || d.user || "unknown";
        if (!contributorMap[key]) {
          contributorMap[key] = 0;
        }
        contributorMap[key] += d.treeCount || 0;
      });

      const treeCountByUser = Object.entries(contributorMap).map(
        ([email, treeCount]) => ({
          email,
          treeCount,
        }),
      );

      res.status(200).json({
        donations,
        totalQuantity,
        totalTreeCount,
        contributorCount: Object.keys(contributorMap).length,
        treeCountByUser, // üÜï th√™m ph·∫ßn n√†y
      });
    } catch (error) {
      console.error("L·ªói khi l·∫•y danh s√°ch ƒë√≥ng g√≥p:", error);
      res
        .status(500)
        .json({ error: "L·ªói server, danh s√°ch ƒë√≥ng g√≥p m·∫•t ti√™u r·ªìi!" });
    }
  }

  public async getDonations(req: Request, res: Response) {
    try {
      const donations = await Donation.find().sort({ createdAt: -1 }).limit(50);
      res.status(200).json({ donations });
    } catch (error) {
      console.error("L·ªói khi l·∫•y danh s√°ch ƒë√≥ng g√≥p:", error);
      res
        .status(500)
        .json({ error: "L·ªói server, danh s√°ch ƒë√≥ng g√≥p m·∫•t ti√™u r·ªìi!" });
    }
  }

  public async deleteDonations(req: Request, res: Response) {
    const _id = req.params.id;
    try {
      const deleted = await Donation.findByIdAndDelete(_id);

      if (!deleted) {
        res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y donation c·∫ßn x√≥a." });
        return;
      }
      res.status(200).json({ message: "X√≥a donation th√†nh c√¥ng!", deleted });
    } catch (error) {
      console.error("L·ªói khi x√≥a donation:", error);
      res.status(500).json({ error: "L·ªói server, x√≥a kh√¥ng ƒë∆∞·ª£c r·ªìi!" });
    }
  }
  public async updateDonations(req: Request, res: Response) {
    const _id = req.params.id;
    const updateData = req.body;
    try {
      const updated = await Donation.findByIdAndUpdate(_id, updateData, {
        new: true,
        runValidators: true,
      });

      if (!updated) {
        res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y donation ƒë·ªÉ c·∫≠p nh·∫≠t." });
        return;
      }
      res
        .status(200)
        .json({ message: "C·∫≠p nh·∫≠t donation th√†nh c√¥ng!", updated });
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t donation:", error);
      res.status(500).json({ error: "L·ªói server, c·∫≠p nh·∫≠t th·∫•t b·∫°i!" });
    }
  }
}

export default DonationController;
